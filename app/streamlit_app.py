"""
Bank Churn Prediction App
Application Streamlit pour pr√©dire le risque de churn des clients bancaires
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.graph_objects as go
import plotly.express as px

# Configuration de la page
st.set_page_config(
    page_title="Bank Churn Prediction",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal
st.title("Bank Churn Prediction")
st.markdown("Pr√©disez le risque de d√©part de vos clients bancaires")
st.markdown("---")

# Chargement du mod√®le
@st.cache_resource
def load_model():
    """Charge le mod√®le et ses informations"""
    model = joblib.load('../models/xgboost_churn_model.pkl')
    model_info = joblib.load('../models/model_info.pkl')
    return model, model_info

# Charger le mod√®le
try:
    model, model_info = load_model()
    st.success("Mod√®le charg√© avec succ√®s")
except Exception as e:
    st.error(f"Erreur lors du chargement: {e}")
    st.stop()

# Afficher les performances du mod√®le
st.markdown("## Performance du Mod√®le")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("Accuracy", f"{model_info['accuracy']*100:.1f}%")
with col2:
    st.metric("ROC-AUC", f"{model_info['roc_auc']:.3f}")
with col3:
    st.metric("Recall", f"{model_info['recall_class_1']*100:.0f}%")

st.markdown("---")

# ========================================
# SIDEBAR - Formulaire de saisie
# ========================================

st.sidebar.header("Informations Client")

# Credit Score
credit_score = st.sidebar.slider(
    "Credit Score",
    min_value=350,
    max_value=850,
    value=650,
    step=10,
    help="Score de cr√©dit du client (350-850)"
)

# Genre
gender = st.sidebar.radio(
    "Genre",
    options=["Homme", "Femme"],
    help="Genre du client"
)

# Age
age = st.sidebar.slider(
    "√Çge",
    min_value=18,
    max_value=100,
    value=40,
    step=1,
    help="√Çge du client en ann√©es"
)

# Pays
geography = st.sidebar.selectbox(
    "Pays",
    options=["France", "Germany", "Spain"],
    help="Pays de r√©sidence du client"
)

# Ann√©es client (Tenure)
tenure = st.sidebar.slider(
    "Ann√©es client",
    min_value=0,
    max_value=10,
    value=5,
    step=1,
    help="Nombre d'ann√©es en tant que client"
)

# Solde du compte
balance = st.sidebar.number_input(
    "Solde du compte (‚Ç¨)",
    min_value=0.0,
    max_value=300000.0,
    value=50000.0,
    step=1000.0,
    help="Solde actuel du compte"
)

# Nombre de produits
num_products = st.sidebar.selectbox(
    "Nombre de produits",
    options=[1, 2, 3, 4],
    index=1,
    help="Nombre de produits bancaires poss√©d√©s"
)

# Carte de cr√©dit
has_credit_card = st.sidebar.radio(
    "Carte de cr√©dit",
    options=["Oui", "Non"],
    help="Le client poss√®de-t-il une carte de cr√©dit ?"
)

# Membre actif
is_active_member = st.sidebar.radio(
    "Membre actif",
    options=["Oui", "Non"],
    help="Le client est-il actif ?"
)

# Salaire estim√©
estimated_salary = st.sidebar.number_input(
    "Salaire estim√© (‚Ç¨)",
    min_value=0.0,
    max_value=200000.0,
    value=50000.0,
    step=1000.0,
    help="Salaire annuel estim√©"
)

st.sidebar.markdown("---")

# Bouton de pr√©diction
predict_button = st.sidebar.button("Pr√©dire le Churn", use_container_width=True, type="primary")

# ========================================
# ONGLETS
# ========================================

tab1, tab2, tab3 = st.tabs(["Pr√©diction", "Analytics", "√Ä propos"])

# ========================================
# ONGLET 1: PR√âDICTION
# ========================================

with tab1:
    st.markdown("## Pr√©diction Client")
    st.info("Mod√®le entra√Æn√© sur: France, Germany, Spain uniquement")
    
    if predict_button:
        
        # 1. Encoder les variables
        gender_encoded = 1 if gender == "Femme" else 0
        has_card_encoded = 1 if has_credit_card == "Oui" else 0
        is_active_encoded = 1 if is_active_member == "Oui" else 0
        
        # Encoder Geography (One-Hot)
        geo_france = 1 if geography == "France" else 0
        geo_germany = 1 if geography == "Germany" else 0
        geo_spain = 1 if geography == "Spain" else 0
        
        # 2. Cr√©er le dictionnaire de donn√©es
        client_data = {
            'CreditScore': credit_score,
            'Gender': gender_encoded,
            'Age': age,
            'Tenure': tenure,
            'Balance': balance,
            'Num Of Products': num_products,
            'Has Credit Card': has_card_encoded,
            'Is Active Member': is_active_encoded,
            'Estimated Salary': estimated_salary,
            'Geography_France': geo_france,
            'Geography_Germany': geo_germany,
            'Geography_Spain': geo_spain
        }
        
        # 3. Convertir en DataFrame
        client_df = pd.DataFrame([client_data])
        
        # 4. Faire la pr√©diction
        prediction = model.predict(client_df)[0]
        probability = model.predict_proba(client_df)[0, 1]
        
        # 5. D√©terminer le niveau de risque
        if probability < 0.3:
            risk_level = "Faible"
            risk_color = "green"
        elif probability < 0.6:
            risk_level = "Moyen"
            risk_color = "orange"
        else:
            risk_level = "√âlev√©"
            risk_color = "red"
        
        # 6. Afficher les r√©sultats
        st.markdown("---")
        st.markdown("## R√©sultat de la Pr√©diction")
        
        # Affichage selon le risque
        if risk_level == "√âlev√©":
            st.error(f"ALERTE: Risque {risk_level} de churn")
        elif risk_level == "Moyen":
            st.warning(f"Attention: Risque {risk_level} de churn")
        else:
            st.success(f"Risque {risk_level} de churn")
        
        # Afficher la probabilit√©
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                "Pr√©diction",
                "CHURN" if prediction == 1 else "RESTE",
                delta=None
            )
        
        with col2:
            st.metric(
                "Probabilit√© de d√©part",
                f"{probability*100:.1f}%",
                delta=None
            )
        
        # Barre de progression
        st.markdown("### Score de risque")
        st.progress(float(probability))
        
        # Gauge de risque
        st.markdown("---")
        fig_gauge = go.Figure(go.Indicator(
            mode="gauge+number",
            value=probability * 100,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "Risque de Churn (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': risk_color},
                'steps': [
                    {'range': [0, 30], 'color': "lightgreen"},
                    {'range': [30, 60], 'color': "lightyellow"},
                    {'range': [60, 100], 'color': "lightcoral"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 60
                }
            }
        ))
        
        fig_gauge.update_layout(height=300)
        st.plotly_chart(fig_gauge, use_container_width=True)
        
        # Recommandations
        st.markdown("---")
        st.markdown("### Recommandations Business")
        
        recommendations = []
        
        if is_active_encoded == 0:
            recommendations.append("‚Ä¢ **Client inactif** ‚Üí Lancer une campagne de r√©activation")
        
        if geography == "Germany":
            recommendations.append("‚Ä¢ **March√© allemand** ‚Üí Appliquer l'offre de r√©tention sp√©ciale Germany")
        
        if age >= 50 and age <= 60:
            recommendations.append("‚Ä¢ **Tranche d'√¢ge 50-60 ans** ‚Üí Proposer le programme seniors")
        
        if num_products >= 3:
            recommendations.append("‚Ä¢ **Trop de produits** ‚Üí Risque d'over-selling, simplifier l'offre")
        
        if balance > 100000:
            recommendations.append("‚Ä¢ **Client √† forte valeur** ‚Üí Assigner un conseiller d√©di√©")
        
        if len(recommendations) > 0:
            for rec in recommendations:
                st.markdown(rec)
        else:
            st.info("Aucune recommandation sp√©cifique. Continuer le suivi standard.")
        
        # Profil client
        st.markdown("---")
        st.markdown("### Profil du Client")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            **Informations personnelles:**
            - Genre: {gender}
            - √Çge: {age} ans
            - Pays: {geography}
            - Ann√©es client: {tenure} ans
            """)
        
        with col2:
            st.markdown(f"""
            **Informations financi√®res:**
            - Credit Score: {credit_score}
            - Solde: {balance:,.0f} ‚Ç¨
            - Salaire: {estimated_salary:,.0f} ‚Ç¨
            - Produits: {num_products}
            """)
    
    else:
        st.info("Remplissez le formulaire dans la barre lat√©rale et cliquez sur 'Pr√©dire le Churn'")

# ========================================
# ONGLET 2: ANALYTICS
# ========================================

with tab2:
    st.markdown("## Analyse du Mod√®le")
    
    # Feature Importance
    st.markdown("### Variables les Plus Importantes")
    
    feature_names = [
        'CreditScore', 'Gender', 'Age', 'Tenure', 'Balance',
        'Num Of Products', 'Has Credit Card', 'Is Active Member',
        'Estimated Salary', 'Geography_France', 'Geography_Germany', 'Geography_Spain'
    ]
    
    feature_importance = pd.DataFrame({
        'Feature': feature_names,
        'Importance': model.feature_importances_
    }).sort_values('Importance', ascending=True)
    
    feature_importance['Feature_FR'] = feature_importance['Feature'].map({
        'CreditScore': 'Score de Cr√©dit',
        'Gender': 'Genre',
        'Age': '√Çge',
        'Tenure': 'Anciennet√©',
        'Balance': 'Solde',
        'Num Of Products': 'Nb Produits',
        'Has Credit Card': 'Carte de Cr√©dit',
        'Is Active Member': 'Membre Actif',
        'Estimated Salary': 'Salaire',
        'Geography_France': 'France',
        'Geography_Germany': 'Allemagne',
        'Geography_Spain': 'Espagne'
    })
    
    fig_importance = px.bar(
        feature_importance,
        x='Importance',
        y='Feature_FR',
        orientation='h',
        title="Importance des Variables (XGBoost)",
        labels={'Importance': 'Importance', 'Feature_FR': 'Variable'},
        color='Importance',
        color_continuous_scale='Blues'
    )
    
    fig_importance.update_layout(height=500)
    st.plotly_chart(fig_importance, use_container_width=True)
    
    st.markdown("""
    **Interpr√©tation:**
    - Plus la barre est longue, plus la variable est importante pour pr√©dire le churn
    - Les 3 variables cl√©s sont: Membre Actif (27%), Allemagne (20%), et √Çge (11%)
    - Le Score de Cr√©dit et la Carte de Cr√©dit ont peu d'impact (<5%)
    """)
    
    # Statistiques du mod√®le
    st.markdown("---")
    st.markdown("### Performance D√©taill√©e")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **M√©triques globales:**
        - Dataset: 10,000 clients
        - Train: 8,000 clients (80%)
        - Test: 2,000 clients (20%)
        - SMOTE appliqu√© (√©quilibrage)
        """)
    
    with col2:
        st.markdown("""
        **Classe 1 (Churn):**
        - Precision: 59%
        - Recall: 62%
        - F1-Score: 61%
        """)

# ========================================
# ONGLET 3: √Ä PROPOS
# ========================================

with tab3:
    # Liens GitHub et LinkedIn en haut √† droite
    col1, col2, col3 = st.columns([6, 1, 1])
    
    with col2:
        st.markdown("""
        <a href='https://github.com/Ibrahym00' target='_blank' style='text-decoration: none;'>
            <button style='background-color: #24292e; color: white; border: none; padding: 8px 16px; 
                          border-radius: 6px; cursor: pointer; font-size: 14px;'>
                GitHub
            </button>
        </a>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <a href='https://www.linkedin.com/in/ibrahim-dabre10/' target='_blank' style='text-decoration: none;'>
            <button style='background-color: #0077b5; color: white; border: none; padding: 8px 16px; 
                          border-radius: 6px; cursor: pointer; font-size: 14px;'>
                LinkedIn
            </button>
        </a>
        """, unsafe_allow_html=True)
    
    st.markdown("## √Ä propos du projet")
    
    st.markdown("""
    ### Objectif
    Cette application pr√©dit le risque de d√©part (churn) des clients bancaires 
    en utilisant un mod√®le de Machine Learning XGBoost.
    
    ### Donn√©es
    - **Source**: Dataset de 10,000 clients bancaires
    - **Variables**: 12 features (√¢ge, solde, pays, etc.)
    - **Cible**: Churn (0 = reste, 1 = part)
    - **Taux de churn**: 20.37%
    
    ### Mod√®le
    - **Algorithme**: XGBoost (Gradient Boosting)
    - **Performance**: ROC-AUC de 0.857
    - **Recall**: 62% (d√©tecte 62% des clients qui vont partir)
    
    ### Insights cl√©s
    - Les clients allemands ont 2x plus de risque de churn (32% vs 16%)
    - Les femmes partent plus que les hommes (25% vs 16%)
    - Les 50-60 ans ont un risque tr√®s √©lev√© (56%)
    - Les membres inactifs ont 2x plus de risque (27% vs 14%)
    
    ### Limitations
    - Mod√®le entra√Æn√© uniquement sur France, Germany, Spain
    - Ne fonctionne pas pour d'autres pays
    - Bas√© sur des donn√©es historiques (peut n√©cessiter une mise √† jour)
    """)
    

    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: gray; padding: 20px;'>
        D√©velopp√© par <strong>Ibrahim DABRE</strong> | Tous droits r√©serv√©s
    </div>
    """, unsafe_allow_html=True)